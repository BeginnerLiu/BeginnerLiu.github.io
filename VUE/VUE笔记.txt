介绍===================================================================================================
输出实例中的数据：
    <div class="box" id="app1">{{message}}</div>
声明VM实力：
    var app1=new Vue({
        el:'#app1',
        data:{
            message:'HELLO WORD'
        }
    });



指令：(v-)
绑定属性值：
    v-bind:title="message"      绑定属性值

条件：
    v-if="seen"                 判断元素是否显示

循环：
    v-for="oName in names"          从数据names中获取对象为oName
    v-for="(oName,index) in names"  从数据names中获取对象为oName，并且获取索引为index，支持获取对象的key。

事件绑定：
    v-on:click="funName"
定义方法：
    methods:{
        funName:function(){
            console.log(this.message);
        }
    }

表单绑定数据：
    <input type="text" v-model="message">   input的value值，绑定给vm实力的数据。


组件化应用构建：
    声明组件：【注意：组件名称、数据名称都需要是小写，大写不识别】【需要补充说明】
    Vue.component('tlis', {
        props:['lidata'],
        template:'<li>{{lidata.name}}</li>'
    });
    组件使用：【同html标签一样用法，只是需要增加绑定数据属性lidata和key，lidata同声明中的props接收名称】
    <tlis v-for="(book,index) in books" v-bind:lidata="book" v-bind:key="index"></tlis>

VUE实例===================================================================================================


只有VUE实例创建时，data中存在的属性才是响应式的。
Object.freeze()     冻结对象，被冻结的data属性响应系统无法再追踪变化。

实例属性与方法，都有前缀$，区别于用户定义的属性。 

生命周期=================================================================================================
生命周期触发函数，与data同级别添加。
生命周期中的this指向vm实例。
不要在选项属性或回调上使用箭头函数，因为箭头函数没有this。

beforeCreate    在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。

created         在实例创建完成后被立即调用。
                在这一步，实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算，watch/event 事件回调。
                然而，挂载阶段还没开始，$el 属性目前不可见。

beforeMount     在挂载开始之前被调用：相关的 render 函数首次被调用。

mounted         el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。
                如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内。
                注意 mounted 不会承诺所有的子组件也都一起被挂载。
                如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted：

beforeUpdate    数据更新时调用，发生在虚拟 DOM 打补丁之前。
                这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。

updated         由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。

activated       keep-alive 组件激活时调用。
deactivated     keep-alive 组件停用时调用。

beforeDestroy   实例销毁之前调用。在这一步，实例仍然完全可用。
destroyed       Vue 实例销毁后调用。
                调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。

errorCaptured   当捕获一个来自子孙组件的错误时被调用。


模板语法=====================
笔记在vm3demo页面中

